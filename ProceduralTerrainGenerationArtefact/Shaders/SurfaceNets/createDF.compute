#version 430


//Define size of local workgroup
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer pointArrays
{
    float points[];
};

uniform vec3 resolution;
uniform ivec3 vertexCount;
uniform float totalTime;
uniform bool testSpheres;

struct FBMvalues{
	int seed;
	int NumLayers;
	vec3 centre;
	float baseRoughness;
	float roughness;
	float persistence;
	float minValue;
	float strength;
	float scale;
	float minHeight;
	float maxHeight;
};

uniform FBMvalues baseHeightmap;
uniform FBMvalues baseCaveMap;
uniform float errorValue;

vec4 permute(vec4 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

float noise(vec3 v) {
	const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);
	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	vec3 i = floor(v + dot(v, C.yyy));
	vec3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min(g.xyz, l.zxy);
	vec3 i2 = max(g.xyz, l.zxy);

	//  x0 = x0 - 0. + 0.0 * C 
	vec3 x1 = x0 - i1 + 1.0 * C.xxx;
	vec3 x2 = x0 - i2 + 2.0 * C.xxx;
	vec3 x3 = x0 - 1. + 3.0 * C.xxx;

	// Permutations
	i = mod(i, 289.0);
	vec4 p = permute(permute(permute(
		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+ i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+ i.x + vec4(0.0, i1.x, i2.x, 1.0));

	// Gradients
	// ( N*N points uniformly over a square, mapped onto an octahedron.)
	float n_ = 1.0 / 7.0; // N=7
	vec3  ns = n_ * D.wyz - D.xzx;

	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)

	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	vec4 x = x_ * ns.x + ns.yyyy;
	vec4 y = y_ * ns.x + ns.yyyy;
	vec4 h = 1.0 - abs(x) - abs(y);

	vec4 b0 = vec4(x.xy, y.xy);
	vec4 b1 = vec4(x.zw, y.zw);

	vec4 s0 = floor(b0) * 2.0 + 1.0;
	vec4 s1 = floor(b1) * 2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));

	vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	vec3 p0 = vec3(a0.xy, h.x);
	vec3 p1 = vec3(a0.zw, h.y);
	vec3 p2 = vec3(a1.xy, h.z);
	vec3 p3 = vec3(a1.zw, h.w);

	//Normalise gradients
	vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}

float fbm(vec3 x) {
	float v = 0.0;
	float a = baseHeightmap.baseRoughness;
	float freq = baseHeightmap.scale;
	for (int i = 0; i < baseHeightmap.NumLayers; ++i) {
		float eval = a * noise((x*freq) + baseHeightmap.centre);
		v += (eval + 1) * .5f;
		x = x * baseHeightmap.roughness;
		a *= baseHeightmap.persistence;
		freq *= 2;
	}
	v = max(0, v - baseHeightmap.minValue);
	return clamp(v * baseHeightmap.strength,baseHeightmap.minHeight,baseHeightmap.maxHeight);
}

float cfbm(vec3 x) {
	float v = 0.0;
	float a = baseCaveMap.baseRoughness;
	float freq = baseCaveMap.scale;
	for (int i = 0; i < baseCaveMap.NumLayers; ++i) {
		float eval = a * noise((x*freq) + baseCaveMap.centre);
		v += (eval + 1) * .5f;
		x = x * baseCaveMap.roughness;
		a *= baseCaveMap.persistence;
		freq *= 2;
	}
	v = max(0, v - baseCaveMap.minValue);
	return clamp(v * baseCaveMap.strength,baseCaveMap.minHeight,baseCaveMap.maxHeight);
}


float smoothIntersectSDF(float distA, float distB, float k ) 
{
  float h = clamp(0.5 - 0.5*(distA-distB)/k, 0., 1.);
  return mix(distA, distB, h ) + k*h*(1.-h); 
}

float f(vec3 Pos){
	float s1 = 6.0/length(((vertexCount/2) + vec3(0,sin(totalTime) * 30,0)) - vec3(Pos));
	float s2 = 6.0/length(((vertexCount/2) - vec3(0,cos(totalTime) * 30,0)) - vec3(Pos));
	return smoothIntersectSDF(s1,s2,.8);
}

vec3 GetGradient(vec3 pos){
	float x = f(vec3(pos.x + errorValue, pos.y,pos.z)) - f(vec3(pos.x - errorValue, pos.y,pos.z));
	float y = f(vec3(pos.x, pos.y + errorValue,pos.z)) - f(vec3(pos.x, pos.y - errorValue,pos.z));
	float z = f(vec3(pos.x, pos.y,pos.z + errorValue)) - f(vec3(pos.x, pos.y,pos.z - errorValue));
	return normalize(vec3(x,y,z) / ( 2 * errorValue));
}

int GetIndex(vec3 pos){
    return int(pos.y) * vertexCount.x * vertexCount.z + int(pos.z) * vertexCount.x + int(pos.x);
}

void main()
{ 

	ivec3 id = ivec3(gl_GlobalInvocationID.xyz);

	if(id.x >= vertexCount.x || id.y >= vertexCount.y || id.z >= vertexCount.z){
		return;
	}


	int index = GetIndex(id);


	float value = fbm(id);

	if(id.x == 0 || id.x == vertexCount.x - 1 || id.z == 0 || id.z == vertexCount.z - 1 || id.y == 0){
	value = 0;
	}
	if(testSpheres){
		points[index] = f(id);
		return;
	}
	points[index] = value;
	
}