#version 430


//Define size of local workgroup
layout(local_size_x = 8, local_size_y = 8) in;

struct vertex{
	vec4 Pos;
	vec4 Color;
	vec4 Normal;
};


layout(std430, binding = 0) buffer Heightmap
{
    float heightMap[];
};

//0 = min 1 = max
layout(std430, binding = 1) buffer vertexInfo
{
    int minMax[];
};


uniform ivec2 vertexCount;
uniform int minMaxPrecisionFactor;
uniform vec2 resolution;

//FBM values
uniform int seed;
uniform int NumLayers;
uniform vec3 centre;
uniform float baseRoughness;
uniform float roughness;
uniform float persistence;
uniform float minValue;
uniform float strength;
uniform float scale;
uniform float minHeight;
uniform float maxHeight;

vec4 permute(vec4 x) { return mod(((x * 34.0) + 1.0) * x, 289.0); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

float snoise(vec3 v) {
	const vec2  C = vec2(1.0 / 6.0, 1.0 / 3.0);
	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	vec3 i = floor(v + dot(v, C.yyy));
	vec3 x0 = v - i + dot(i, C.xxx);

	// Other corners
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min(g.xyz, l.zxy);
	vec3 i2 = max(g.xyz, l.zxy);

	//  x0 = x0 - 0. + 0.0 * C 
	vec3 x1 = x0 - i1 + 1.0 * C.xxx;
	vec3 x2 = x0 - i2 + 2.0 * C.xxx;
	vec3 x3 = x0 - 1. + 3.0 * C.xxx;

	// Permutations
	i = mod(i, 289.0);
	vec4 p = permute(permute(permute(
		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+ i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+ i.x + vec4(0.0, i1.x, i2.x, 1.0));

	// Gradients
	// ( N*N points uniformly over a square, mapped onto an octahedron.)
	float n_ = 1.0 / 7.0; // N=7
	vec3  ns = n_ * D.wyz - D.xzx;

	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,N*N)

	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

	vec4 x = x_ * ns.x + ns.yyyy;
	vec4 y = y_ * ns.x + ns.yyyy;
	vec4 h = 1.0 - abs(x) - abs(y);

	vec4 b0 = vec4(x.xy, y.xy);
	vec4 b1 = vec4(x.zw, y.zw);

	vec4 s0 = floor(b0) * 2.0 + 1.0;
	vec4 s1 = floor(b1) * 2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));

	vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

	vec3 p0 = vec3(a0.xy, h.x);
	vec3 p1 = vec3(a0.zw, h.y);
	vec3 p2 = vec3(a1.xy, h.z);
	vec3 p3 = vec3(a1.zw, h.w);

	//Normalise gradients
	vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
	m = m * m;
	return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),
		dot(p2, x2), dot(p3, x3)));
}


float fbm(vec3 x, float _scale) {
	float v = 0.0;
	float a = baseRoughness;
	float freq = _scale;
	for (int i = 0; i < NumLayers; ++i) {
		float eval = a * snoise((x*freq) + centre);
		v += (eval + 1) * .5f;
		x = x * roughness;
		a *= persistence;
		freq *= 2;
	}
	v = max(0, v - minValue);
	return clamp(v * strength,minHeight,maxHeight);
}


void main()
{ 

	ivec2 id = ivec2(gl_GlobalInvocationID.xy);

	if(id.x >= vertexCount.x + 1 || id.y >= vertexCount.y + 1){
		return;
	}


	int index = id.y * vertexCount.x + id.x;


	heightMap[index] = (fbm(vec3(id.x * resolution.x,0,id.y * resolution.y), scale) + fbm(vec3(id.x * resolution.x,0,id.y * resolution.y), scale / 2f)) / 2f;

	//Store min and max heights
	int infoValue = int(heightMap[index] * minMaxPrecisionFactor);
	minMax[0] = atomicMin(minMax[0],infoValue);
	minMax[1] = atomicMax(minMax[1],infoValue);

}